
//! Autogenerated weights for pallet_lockdown_mode
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-29, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Hectors-MBP-14.fritz.box`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kreivo-rococo-local"), DB CACHE: 1024

// Executed Command:
// ./target/release/virto-node
// benchmark
// pallet
// --chain=kreivo-rococo-local
// --steps=50
// --repeat=20
// --pallet=pallet_lockdown-mode
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/lockdown-mode/src/weights.rs
// --template=templates/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_lockdown_mode.
pub trait WeightInfo {
	fn activate_lockdown_mode() -> Weight;
	fn deactivate_lockdown_mode() -> Weight;
}

/// Weights for pallet_lockdown_mode using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: LockdownMode LockdownModeStatus (r:1 w:1)
	/// Proof: LockdownMode LockdownModeStatus (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: XcmpQueue QueueSuspended (r:0 w:1)
	/// Proof Skipped: XcmpQueue QueueSuspended (max_values: Some(1), max_size: None, mode: Measured)
	fn activate_lockdown_mode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `66`
		//  Estimated: `1486`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_000_000, 1486)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: LockdownMode LockdownModeStatus (r:1 w:1)
	/// Proof: LockdownMode LockdownModeStatus (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: XcmpQueue QueueSuspended (r:0 w:1)
	/// Proof Skipped: XcmpQueue QueueSuspended (max_values: Some(1), max_size: None, mode: Measured)
	fn deactivate_lockdown_mode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `66`
		//  Estimated: `1486`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(13_000_000, 1486)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: LockdownMode LockdownModeStatus (r:1 w:1)
	/// Proof: LockdownMode LockdownModeStatus (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: XcmpQueue QueueSuspended (r:0 w:1)
	/// Proof Skipped: XcmpQueue QueueSuspended (max_values: Some(1), max_size: None, mode: Measured)
	fn activate_lockdown_mode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `66`
		//  Estimated: `1486`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_000_000, 1486)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: LockdownMode LockdownModeStatus (r:1 w:1)
	/// Proof: LockdownMode LockdownModeStatus (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// Storage: XcmpQueue QueueSuspended (r:0 w:1)
	/// Proof Skipped: XcmpQueue QueueSuspended (max_values: Some(1), max_size: None, mode: Measured)
	fn deactivate_lockdown_mode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `66`
		//  Estimated: `1486`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(13_000_000, 1486)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
